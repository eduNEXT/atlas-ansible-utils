---
- name: Install ClickHouse dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - dirmngr
      - gpg-agent
    state: present
    update_cache: true

- name: Add the ClickHouse signing key
  ansible.builtin.apt_key:
    keyserver: "{{ CLICKHOUSE_KEY_SERVER }}"
    id: "{{ CLICKHOUSE_APT_KEY }}"

- name: Add the ClickHouse repo to the sources list
  ansible.builtin.apt_repository:
    repo: "{{ CLICKHOUSE_REPO }}"
    state: present

- name: Install ClickHouse
  ansible.builtin.apt:
    name: "{{ CLICKHOUSE_PACKAGES | map('regex_replace', '$', '=' + CLICKHOUSE_VERSION) | list }}"
    state: present
    update_cache: true
  become: true

- name: Create configuration files
  tags:
    - configuration
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/clickhouse-server/config.d/{{ item.path }}"
    mode: "preserve"
  loop: "{{ lookup('community.general.filetree', 'templates/config.d/') }}"

- name: Create users configuration file
  tags:
    - configuration
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/clickhouse-server/users.d/{{ item.path }}"
    owner: "clickhouse"
    group: "clickhouse"
    mode: "0600"
  loop: "{{ lookup('community.general.filetree', 'templates/users.d/', wantlist=True) }}"

- name: Copy TLS certificates
  when: CLICKHOUSE_ENABLE_TLS
  tags:
    - tls
  ansible.builtin.copy:
    src: "{{ CLICKHOUSE_CERTIFICATES_SOURCE_DIR }}/{{ item }}"
    dest: "/etc/clickhouse-server/certs/{{ item }}"
    owner: clickhouse
    group: clickhouse
    mode: '0600'
    backup: true
  loop:
    - "tls.key"
    - "tls.crt"

- name: Start clickhouse service
  ansible.builtin.service:
    name: clickhouse-server
    state: started
    enabled: true

- name: Create SQL Roles, Users and grant permissions
  loop: "{{ CLICKHOUSE_USERS }}"
  register: clickhouse_client
  tags:
    - molecule-idempotence-notest
  ansible.builtin.shell: |
    clickhouse-client --user "default" --password="{{ CLICKHOUSE_DEFAULT_USER_PASSWORD }}" --multiquery <<'EOF'

    CREATE ROLE IF NOT EXISTS '{{ item.name }}_admin';

    GRANT ALL ON system.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_xapi.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_xapi_events_all.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_xapi_events_all.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_reporting.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_event_sink.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_vector.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT CREATE USER ON *.* to '{{ item.name }}_admin';
    GRANT ALTER USER ON *.* to '{{ item.name }}_admin';
    GRANT DROP FUNCTION ON *.* to '{{ item.name }}_admin';
    GRANT CREATE FUNCTION ON *.* to '{{ item.name }}_admin';

    CREATE USER IF NOT EXISTS {{ item.name }} identified with plaintext_password by '{{ item.password }}';

    GRANT {{ item.name }}_admin to {{ item.name }};

    EOF
