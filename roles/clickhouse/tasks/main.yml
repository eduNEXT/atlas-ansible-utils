---
- name: Install ClickHouse dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - dirmngr
      - gpg-agent
    state: present
    update_cache: true

- name: Add ClickHouse GPG key
  ansible.builtin.apt_key:
    url: https://packages.clickhouse.com/rpm/lts/repodata/repomd.xml.key
    keyring: /usr/share/keyrings/clickhouse-keyring.gpg
    state: present

- name: Add ClickHouse repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/clickhouse-keyring.gpg arch=amd64] https://packages.clickhouse.com/deb stable main"
    filename: clickhouse
    state: present
    update_cache: yes

- name: Install ClickHouse
  ansible.builtin.apt:
    name: "{{ CLICKHOUSE_PACKAGES | map('regex_replace', '$', '=' + CLICKHOUSE_VERSION) | list }}"
    state: present
    update_cache: true
  become: true

- name: Create /etc/clickhouse-server/config.d/host.xml
  ansible.builtin.template:
    src: host.xml.j2
    dest: /etc/clickhouse-server/config.d/host.xml
    mode: preserve

# - name: Grant default user permissions to create users and groups
- name: Edit /etc/clickhouse-server/users.xml
  ansible.builtin.template:
    src: users.xml.j2
    dest: /etc/clickhouse-server/users.xml
    mode: preserve

- name: Start clickhouse service
  ansible.builtin.service:
    name: clickhouse-server
    state: started
    enabled: true

- name: Create SQL Roles, Users and grant permissions
  loop: "{{ CLICKHOUSE_USERS }}"
  register: clickhouse_client
  tags:
    - molecule-idempotence-notest
  ansible.builtin.shell: |
    clickhouse-client --user "default" --password="{{ CLICKHOUSE_DEFAULT_USER_PASSWORD }}" --multiquery <<'EOF'

    CREATE ROLE IF NOT EXISTS '{{ item.name }}_admin';

    GRANT ALL ON system.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_xapi.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_xapi_events_all.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_xapi_events_all.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_reporting.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_event_sink.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT ALL ON {{ item.name }}_vector.* TO '{{ item.name }}_admin' WITH GRANT OPTION;
    GRANT CREATE USER ON *.* to '{{ item.name }}_admin';
    GRANT ALTER USER ON *.* to '{{ item.name }}_admin';
    GRANT DROP FUNCTION ON *.* to '{{ item.name }}_admin';
    GRANT CREATE FUNCTION ON *.* to '{{ item.name }}_admin';

    CREATE USER IF NOT EXISTS {{ item.name }} identified with plaintext_password by '{{ item.password }}';

    GRANT {{ item.name }}_admin to {{ item.name }};

    EOF
