# Description: Playbook to clone MySQL databases by extracting backups and restore them with
# changed database names in the same MySQL instance.
- name: Launch MySQL backup and restore
  hosts: mysql_servers
  become: True
  gather_facts: True
  vars:
    MYSQL_CLONE_USER: migrate
    MYSQL_CLONE_PASSWORD: 922fxW9H1pSf14C2hUa8MaVYfEPTOQFDStn
    MYSQL_CLONE_ROOT: /var/edunext_tmp/mysql
    MYSQL_CLONE_DB_LIST:
    - edxapp
    - edx_notes_api
    MYSQL_CLONE_RESTORE_SUFFIX: "_clone"

  tasks:
    - name: Backup and restore every single database in the clone list
      block:
        - name: Extract MySQL backup from database {{ item }}
          include_role:
            name: mysql_backup
          vars:
            MYSQL_BACKUP_ALL_DATABASES: false
            MYSQL_BACKUP_USER: "{{ MYSQL_CLONE_USER }}"
            MYSQL_BACKUP_PASSWORD: "{{ MYSQL_CLONE_PASSWORD }}"
            MYSQL_BACKUP_DATABASES:
            - "{{ item }}"
            MYSQL_BACKUP_ROOT: "{{ MYSQL_CLONE_ROOT }}"
            MYSQL_BACKUP_STORAGE_OPTIONS:
              EXTERNAL_STORAGE_TYPE: ""
              EXTERNAL_STORAGE_OPTIONS: {}

        - name: Generate new database name with suffix
          set_fact:
            new_clone_db_name: "{{ item + MYSQL_CLONE_RESTORE_SUFFIX }}"

        - name: Drop database if exists
          mysql_db:
            name: "{{ new_clone_db_name }}"
            state: "absent"

        - name: Create new database
          mysql_db:
            name: "{{ new_clone_db_name }}"
            state: "present"

        - name: Restore MySQL backup on database {{ item }}
          include_role:
            name: mysql_restore
          vars:
            MYSQL_RESTORE_BACKUP_ROOT: "{{ MYSQL_CLONE_ROOT }}"
            MYSQL_RESTORE_USER: "{{ MYSQL_CLONE_USER }}"
            MYSQL_RESTORE_PASSWORD: "{{ MYSQL_CLONE_PASSWORD }}"
            MYSQL_RESTORE_DATABASE: "{{ new_clone_db_name }}"
      loop: "{{ MYSQL_CLONE_DB_LIST }}"
